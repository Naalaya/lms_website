generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Roles {
  Admin
  Teacher
  Student
}

enum Gender {
  Male
  Female
}
  //  khoa
model Faculty{
  faculty_id      String    @id @default(auto())@map("_id") @db.ObjectId
  faculty_name    String    
  faculty_address String  
  majors          Major[]   
  user            User[]
 
}
  //Ngành
model Major{
  major_id              String             @id @default(auto())@map("_id") @db.ObjectId
  major_name            String
  faculty               Faculty            @relation(fields: [major_id],references: [faculty_id])
  specialization        Specialization[]
}
  //Chuyên ngành
model Specialization{
  specialization_id       String          @id @default(auto())@map("_id") @db.ObjectId
  specialization_name     String
  major                   Major           @relation(fields: [specialization_id],references: [major_id])
  classes                 Class[]
  courses                 Course[]
}
  //Classes
model Class{
  class_id                String         @id @default(auto())@map("_id") @db.ObjectId
  class_name              String
  specialization          Specialization @relation(fields: [class_id],references: [specialization_id])
  students                Student[]
}
  //Courses
model Course{
  course_id               String          @id @default(auto())@map("_id") @db.ObjectId
  course_name             String
  create_at               DateTime        @default(now())
  lecturer                Teacher         @relation(fields: [course_id],references: [t_id])
  prerequired             String  
  semester                String
  is_complete             Boolean         @default(true)
  status                  Boolean         @default(false) //đã được duyệt hay chưa
  specialization          Specialization  @relation(fields: [course_id], references: [specialization_id])
  classes                 Class_Enrollment[]
}
model Class_Enrollment{
  enroll_id            String        @id @default(auto())@map("_id") @db.ObjectId 
  classes              Course        @relation(fields: [enroll_id],references: [course_id])
  student_ids          String[]      @db.ObjectId
  student              Student[]     @relation(fields: [student_ids], references: [s_id])
}
  //User
model User{
  user_id                 String          @id @default(auto())@map("_id") @db.ObjectId 
  user_name               String
  image_url               String
  gender                  Gender
  role                    Roles

  school_email            String          
  personal_email          String
  contact_no              String

  citizen_id              String
  ethnicity               String
  date_of_birth           String
  faculty                 Faculty        @relation(fields: [user_id],references: [faculty_id])

  create_at               DateTime       @default(now())
  update_at               DateTime       @default(now())

  account                 Account?
  teachers                Teacher?
  students                Student?
  admins                  Admin?
}
model Account{
  a_id                String        @id @default(auto())@map("_id") @db.ObjectId 
  account_id          User          @relation(fields: [a_id],references: [user_id])
  account_password    String
  default_password    String        
  is_locked           Boolean       @default(false) // Account chua bi khoa             
}
model Teacher{
  t_id                String        @id @default(auto())@map("_id") @db.ObjectId 
  teacher_id          User          @relation(fields: [t_id], references: [user_id])
  degree              String        
  course_teach        Course[]
}
model Student{
  s_id                String              @id @default(auto())@map("_id") @db.ObjectId 
  student_id          User                  @relation(fields: [s_id],references: [user_id])
  class               Class                 @relation(fields: [s_id],references: [class_id])
  enrollment_ids      String[]              @db.ObjectId  
  class_enrollment    Class_Enrollment[]    @relation(fields: [enrollment_ids],references: [enroll_id])
}
model Admin{
  id                  String        @id @default(auto())@map("_id") @db.ObjectId 
  admin_id            User          @relation(fields: [id], references: [user_id])
}